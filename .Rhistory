}
)
head(english_monarchs)
library(plyr)
english_monarchs <- mutate(
english_monarchs,
length.of.reign.years        = end.of.reign - start.of.reign,
reign.was.more.than.30.years = length.of.reign.years > 30
)
head(english_monarchs)
data("deer_endocranial_volume", package = "learningr")
has_all_measurements <- complete.cases(deer_endocranial_volume)
deer_endocranial_volume[has_all_measurements, ]
na.omit(deer_endocranial_volume)
na.fail(deer_endocranial_volume)
deer_wide <- deer_endocranial_volume[, 1:5]
deer_wide
library(reshape2)
deer_long(melt(deer_sied, id.vars="SkullID"))
deer_long <-  melt(deer_sied, id.vars="SkullID")
deer_long <-  melt(deer_wide, id.vars="SkullID")
head(deer_long)
deer_wide_again = dcast(deer_long, SkullID ~ variable)
head(deer_wide_again)
install.packages("sqldf")
library(sqldf)
subset(
deer_endocranial_volume,
VolCT > 400 | VolCT2 > 400,
c(VolCT, VolCT2)
)
sqldf(query)
VolCT2 > 400"
sqldf(query)
query <-
"SELECT
VolCT,
VolCT2
FROM
deer_endocranial_volume
WHERE
VolCT > 400 OR
VolCT2 > 400"
query <-   "SELECT VolCT, VolCT2 FROM deer_endocranial_volume WHERE VolCT > 400 OR VolCT2 > 400"
query <-   'SELECT VolCT, VolCT2 FROM deer_endocranial_volume WHERE VolCT > 400 OR VolCT2 > 400'
sqldf(query)
x <- c(2, 32, 4, 16, 8)
sort(x)
sort(x, decreasing = TRUE)
sort(c("I", "shot", "the", "city", "sheriff"))
order(x)
x[order(x)]
identical(sort(x), x[order(x)])
year_order <- order(english_monarchs$start.of.reign)
english_monarchs[year_order, ]
arrange(english_monarchs, start.of.reign)
(x <- sample(3, 7, replace = TRUE))
rank(x)
rank(x, ties.method = "first")
ct2 <- deer_endocranial_volume$VolCT2  #for convenience of typing
isnt.na <- Negate(is.na)
identical(isnt.na(ct2), !is.na(ct2))
Filter(isnt.na, ct2)
Position(isnt.na, ct2)
Find(isnt.na, ct2)
get_volume <- function(ct, bead, lwh, finarelli, ct2, bead2, lwh2)
{
#If there is a second measurement, take the average
if(!is.na(ct2))
{
ct <- (ct + ct2) / 2
bead <- (bead + bead2) / 2
lwh <- (lwh + lwh2) / 2
}
#Divide lwh by 4 to bring it in line with other measurements
c(ct = ct, bead = bead, lwh.4 = lwh / 4, finarelli = finarelli)
}
measurements_by_deer <- with(
deer_endocranial_volume,
Map(
get_volume,
VolCT,
VolBead,
VolLWH,
VolFinarelli,
VolCT2,
VolBead2,
VolLWH2
)
)
head(measurements_by_deer)
Reduce("+", list(a,b,c,d,e))
Reduce("+", list(1,2,3,4))
pmax2 <- function(x, y) ifelse(x >= y, x, y)
Reduce(pmax2, measurements_by_deer)
setwd("C:/Users/Deanna\Documents/grad school/DS710/")
setwd("C:/Users/Deanna/Documents/grad school/DS710/")
boom <- read.csv("ds710Practice/babyfoom.csv")
boom <- read.csv("/ds710Practice/babyfoom.csv")
setwd("C:/Users/Deanna/Documents/grad school/DS710")
boom <- read.csv("/ds710Practice/babyfoom.csv")
setwd("C:/Users/Deanna/Documents/grad school/DS710/ds710Practice")
boom <- read.csv("babyfoom.csv")
boom <- read.csv("babyboom.csv")
head(boom)
summary(boom$Sex)
boom$cleanedSex <-  str_replace(
boom$Sex,
ignore.case("^m(ale)?$"),
"Male"
)
boom$cleanedSex <-  str_replace(
boom$Sex,
regex = "^m(ale)?$",
ignore_case = TRUE
"Male"
)
boom$cleanedSex <-  str_replace(
boom$Sex,
regex = "^m(ale)?$",
ignore_case = TRUE,
"Male"
)
boom$cleanedSex <-  str_replace(
boom$Sex,
regex = "^[m|M](ale)?$",
"Male"
)
boom$cleanedSex <-  str_replace(
boom$Sex,
"^[m|M](ale)?$",
"Male"
)
boom
boom$cleanedSex <-  str_replace(
boom$Sex,
"^([m|M](ale))|boy?$",
"Male"
)
boom
clean_sex <- function(inWord){
if (inWord == 'boy'| inWord = 'Male'){
return ('M')
}
if (inWord == 'female'| inWord == 'girl'){
return ('F')
}
if (inWord.length() == 0){
return(NA)
}
}
clean_sex <- function(inWord){
if (inWord == 'boy'| inWord = 'Male'){
return ('M')
}
if (inWord == 'female'| inWord == 'girl'){
return ('F')
}
if (length(inWord) == 0){
return(NA)
}
}
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord = 'F'){
outWord = 'F'
}
return (outWord)
}
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord = 'F'){
outWord = 'F'
}
return (outWord)
}
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord = 'F'){
outWord = 'F'
}
return (outWord)
}
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord == 'F'){
outWord = 'F'
}
return (outWord)
}
boom$cleanedSex <- Reduce(clean_sex, boom$Sex)
boom$cleanedSex <- apply(boom$Sex, clean_sex)
boom$cleanedSex <- apply(boom$Sex, 1, clean_sex)
boom$cleanedSex <- apply(boom$Sex, 2, clean_sex)
head(boom)
boom$cleanedSex <- apply(boom[,2], 2, clean_sex)
boom$cleanedSex <- apply(boom[,2], 1, clean_sex)
y
SexToFM <- function(x){
y <- rep.int(NA, length(x))
y[ x == "M" ] <- "M"
y[ x == "Male" ] <- "M"
y[ x == "boy" ] <- "M"
y[ x == "F" ] <- "F"
y[ x == "female" ] <- "F"
y[ x == "girl" ] <- "F"
y
} # end of SexToFM function
boom$cleanedSex <- SexToFM(boom$Sex)
boom
boom$cleanedSex <- clean_sex(boom$Sex)
boom
boom$cleanedSex <- sapply(2, clean_sex)
boom
boom$cleanedSex <- sapply(1, clean_sex)
boom
boom$cleanedSex <- sapply(boom$Sex, clean_sex)
boom
boom$Sex %in% female
female = c("F", "female", "girl")
boom$Sex %in% female
male = c('M', 'Male', 'boy')
SexToFM2 <- function(x){
y <- rep.int(NA, length(x))
y[ x %in% male ] <- "M"
y[ x %in% female ] <- "F"
y
} # end of SexToFM function
boom$cleanedSex <- SexToFM2(boom$Sex)
boom
SexToFM2 <- function(x){
female = c("F", "female", "girl")
male = c('M', 'Male', 'boy')
y <- rep.int(NA, length(x))
y[ x %in% male ] <- "M"
y[ x %in% female ] <- "F"
y
} # end of SexToFM function
boom$cleanedSex <- SexToFM2(boom$Sex)
cleaned_sex_values <- SexToFM2(boom$Sex)
cbind(as.character(boom$Sex),cleaned_sex_values)
summary(boom$Time)
typeof(boom$Time)
Time2 = as.numeric(boom$Time)
Time2[1:5]
boom$Time
Time2
Time3 <- as.numeric(levels(boom$Time))[boom$Time]
Time3
cbind(as.character(boom$Time),Time3)
boom$Time = Time3
summary(boom$Time)
tooLate = boom[which boom$Time > 2459]
tooLate = boom[which(boom$Time > 2459)]
tooLate = boom[which(boom$Time > 2459), ]
tooLate
boom$Time[which(boom$Time > 2459)]
boom$Time[which(boom$Time > 2459)] = NA
boom
max(boom$Time)
max(boom$Time[which(boom$Time != NA)])
decTimes <- boom[which(   ( trunc(Time) == Time ) == F   ), ]
decTimes <- boom[which(   ( trunc(boom$Time) == boom$Time ) == F   ), ]
decTimes
minPlus <- boom[which((boom$Time %% 100) > 59]
minPlus <- boom[which(boom$Time %% 100 > 59)]
minPlus <- boom[which(boom$Time %% 100 > 59),]
minPlus
boom$Time[which(boom$Time %% 100 > 59)] = NA
boom[14]
boom[,14]
boom
boom$Time[14]
summary(boom$Weight)
lowWeight <- boom[which(boom$Weight < 1000), ]
lowWeight
summary(Time)
summary(boom$Time)
which( is.na( boom$Time ) )
Time3 = !is.na(boom$Time)
Time3
Time3 = boom$Time[which (!is.na(boom$Time))]
Time3
sd(Time3)
sd(boom$Time, na.rm=T)
mydata2 = data.frame(boom$Time,boom$cleanedSex,boom$Weight)
mydata2
mydata2.omit()
na.omit(mydata2)
mydata2 = data.frame(boom$Time,boom$Sex,boom$Weight)
na.omit(mydata2)
mydata2 = data.frame(boom$Time,boom$CleanedSex,boom$Weight)
mydata2 = data.frame(boom$Time,boom$cleanedSex,boom$Weight)
mydata2
boom <- read.csv("babyboom.csv")
mydata2 = data.frame(boom$Time,boom$cleanedSex,boom$Weight)
mydata2 = data.frame(boom$Time,boom$Sex,boom$Weight)
mydata2
dim(mydata2)
boom <- read.csv("babyboom.csv")
head(boom)
summary(boom$Sex)
#My approach
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord == 'F'){
outWord = 'F'
}
return (outWord)
}
cleanedSex <- sapply(boom$Sex, clean_sex)
boom
#Webworks answer
SexToFM <- function(x){
y <- rep.int(NA, length(x))
y[ x == "M" ] <- "M"
y[ x == "Male" ] <- "M"
y[ x == "boy" ] <- "M"
y[ x == "F" ] <- "F"
y[ x == "female" ] <- "F"
y[ x == "girl" ] <- "F"
y
} # end of SexToFM function
cleanedSex <- SexToFM(boom$Sex)
boom
#another approach
SexToFM2 <- function(x){
female = c("F", "female", "girl")
male = c('M', 'Male', 'boy')
y <- rep.int(NA, length(x))
y[ x %in% male ] <- "M"
y[ x %in% female ] <- "F"
y
} # end of SexToFM function
cleanedSex <- SexToFM2(boom$Sex)
boom
#bind the raw and cleaned together
cleaned_sex_values <- SexToFM2(boom$Sex)
cbind(as.character(boom$Sex),cleaned_sex_values)
#update teh dataframe
boom$Sex <- cleaned_sex_values
Time3 <- as.numeric(levels(boom$Time))[boom$Time]
#look at unrealistic numbers for time
summary(boom$Time)
tooLate = boom[which(boom$Time > 2459), ]
boom$Time[which(boom$Time > 2459)] = NA
#find times with decimals
decTimes <- boom[which(   ( trunc(boom$Time) == boom$Time ) == F   ), ]
decTimes
#find minutes more than 59
minPlus <- boom[which(boom$Time %% 100 > 59),]
minPlus
#set it to NA
boom$Time[which(boom$Time %% 100 > 59)] = NA
boom$Time[14]
summary(boom$Weight)
lowWeight <- boom[which(boom$Weight < 1000), ]
lowWeight
boom$Weight[which(boom$Weight < 1000)] = NA
mydata2 = data.frame(boom$Time,boom$Sex,boom$Weight)
mydata3 <- na.omit(mydata2)
dim(mydata2)
boom
boom <- read.csv("babyboom.csv")
head(boom)
summary(boom$Sex)
#My approach
clean_sex <- function(inWord){
outWord = NA
if (inWord == 'boy'| inWord == 'Male' | inWord == 'M'){
outWord =  'M'
}
if (inWord == 'female'| inWord == 'girl'| inWord == 'F'){
outWord = 'F'
}
return (outWord)
}
cleanedSex <- sapply(boom$Sex, clean_sex)
boom
#Webworks answer
SexToFM <- function(x){
y <- rep.int(NA, length(x))
y[ x == "M" ] <- "M"
y[ x == "Male" ] <- "M"
y[ x == "boy" ] <- "M"
y[ x == "F" ] <- "F"
y[ x == "female" ] <- "F"
y[ x == "girl" ] <- "F"
y
} # end of SexToFM function
cleanedSex <- SexToFM(boom$Sex)
boom
#another approach
SexToFM2 <- function(x){
female = c("F", "female", "girl")
male = c('M', 'Male', 'boy')
y <- rep.int(NA, length(x))
y[ x %in% male ] <- "M"
y[ x %in% female ] <- "F"
y
} # end of SexToFM function
cleanedSex <- SexToFM2(boom$Sex)
boom
#bind the raw and cleaned together
cleaned_sex_values <- SexToFM2(boom$Sex)
cbind(as.character(boom$Sex),cleaned_sex_values)
#update teh dataframe
boom$Sex <- cleaned_sex_values
#check out the time variable
summary(boom$Time)
typeof(boom$Time)
#this doesn't work
Time2 = as.numeric(boom$Time)
Time2
#this is how to convert without loss of info, other than converting non numbers to NA
Time3 <- as.numeric(levels(boom$Time))[boom$Time]
Time3
cbind(as.character(boom$Time),Time3)
boom$Time = Time3
#look at unrealistic numbers for time
summary(boom$Time)
tooLate = boom[which(boom$Time > 2459), ]
boom$Time[which(boom$Time > 2459)] = NA
#find times with decimals
decTimes <- boom[which(   ( trunc(boom$Time) == boom$Time ) == F   ), ]
decTimes
#find minutes more than 59
minPlus <- boom[which(boom$Time %% 100 > 59),]
minPlus
#set it to NA
boom$Time[which(boom$Time %% 100 > 59)] = NA
boom$Time[14]
summary(boom$Weight)
lowWeight <- boom[which(boom$Weight < 1000), ]
lowWeight
#set these values to NA?
boom$Weight[which(boom$Weight < 1000)] = NA
#look for NA's in Time
summary(boom$Time)
which( is.na( boom$Time ) )
Time3 = boom$Time[which (!is.na(boom$Time))]
Time3
sd(Time3)
sd(boom$Time, na.rm=T)
mydata2 = data.frame(boom$Time,boom$Sex,boom$Weight)
mydata2
boom
mydata3 <- na.omit(mydata2)
dim(mydata2)
mydata3 <- complete.cases(mydata2)
dim(mydata2)
dim(mydata3)
mydata3
mydata3 <- mydata2[,complete.cases(mydata2)]
mydata3 <- mydata2[complete.cases(mydata2),]
mydata3
dim(mydata3)
myData3$morningBirth <- with(mydata, if (mydata3$Time < 1200) TRUE else FALSE)
myData3$morningBirth <- with(mydata3, if (mydata3$Time < 1200) TRUE else FALSE)
myData3 <- within(mydata3, born.in.morning <- mydata3$boom.Time < 1200)
myData3
sort(myData3$boom.Time)
timeOrder = order(myData3$boom.Time)
myData3[timeOrder]
myData3[timeOrder,]
tableFarm <- read.csv("ds710fall2017assignment6-Brisbin/TableFarm.csv")
tableFarm <- read.csv("C:/Users/Deanna/Documents/grad school/DS710/ds710fall2017assignment6-Brisbin/TableFarm.csv")
tableFarm
plot(tableFarm, main="TableFarm Revenue by Month")
abline(v=13, col="red", lwd=4)
legend("topleft", legend=c("Month in which new campaign began", "Revenue"), col=c("red", "black"), cex=.75, pch=c(15, 1))
first <-  tableFarm[which(tableFarm$Month<13),]
second <- tableFarm[which(tableFarm$Month>=13),]
boxplot( first$Revenue, second$Revenue, names=c("Before Marketing", "After Marketing"), main="TableFarm Revenue Distribution" )
summary(first$Revenue)
summary(second$Revenue)
t.test(second$Revenue, first$Revenue,  alternative="greater")
nobel <- read.csv("ds710fall2017assignment6-Brisbin/Nobel.csv")
nobel <- read.csv("C:/Users/Deanna/Documents/grad school/DS710/ds710fall2017assignment6-Brisbin/Nobel.csv")
head(nobel)
plot(nobel, main="Nobel Winners Versus Chocolate Consumption")
model <- lm(Winners ~ Consumption, data = nobel) #we are predicting winners based on consumption, so winners comes first
model
abline(model, col="red", lwd=2)
abline(a = -.8, b=.4, col="blue", lwd=2)
legend("topleft", legend=c("Slope with Errors", "Initial Slope"), col = c("red", "blue"), pch=c(15, 15))
summary(model)
par(mfrow = c(2,2))
plot(model)
par(mfrow = c(1,1))
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
usnews <- read.csv("C:/Users/Deanna/Documents/grad school/DS710/ds710fall2017assignment9-Brisbin/usnews_clean")
usnews <- read.csv("C:/Users/Deanna/Documents/grad school/DS710/ds710fall2017assignment9-Brisbin/usnews_clean.csv")
head(usnews)
library(xtable)
lapply(usnews, summary)
